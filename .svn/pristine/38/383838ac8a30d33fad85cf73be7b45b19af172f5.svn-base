package edu.upenn.cis455.mapreduce.master;

import java.io.*;
import java.net.*;
import java.util.*;

public class Client {

	private URL url;
	private String url_str;
	private String body;
	private Socket clientSocket;
	private HashMap<String, String> post_params;

	/**
	 * Constructor
	 */
	public Client() {
		this.post_params = new HashMap<String, String>();
	}

	public void set_post_param(String key, String value) {
		try {
			post_params.put(URLEncoder.encode(key, "UTF-8"), URLEncoder.encode(value, "UTF-8"));
		} 
		catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	}

	public void setURL(String u) {
		url_str = u;
	}

	public void send_post_request() {
		/*if (url.getProtocol().equalsIgnoreCase("https"))
		{
			send_post_https_request();
			return;
		}*/
		try {
			url = new URL(url_str);
			InetAddress address;
			address = InetAddress.getByName(url.getHost());
			clientSocket = new Socket(address.getHostAddress(), url.getPort());
			clientSocket.setSoTimeout(10000);
		} 
		catch (Exception e1) {
			e1.printStackTrace();
		}
		BufferedWriter bw;
		BufferedReader br;
		body = "";
		String line;
		try {
			bw = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream(), "UTF8"));
			bw.write("POST " + url_str + " HTTP/1.0\r\n\r\n");
			for (Map.Entry<String, String> param : post_params.entrySet()) {
				bw.write(param.getKey() + "=" + param.getValue() + "\r\n");
			}
			bw.flush();
			br = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
			while ((line = br.readLine()) != null) {
				body += line;
			}
			bw.close();
			br.close();
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void send_post_https_request() {

	}

	/**
	 * Function to send a https request to the url
	 *//*
	private void send_https_request()
	{
		HttpsURLConnection con = null;
		int status=0;
		try{
			con = (HttpsURLConnection) url.openConnection();
			con.setRequestMethod(method);
			con.setRequestProperty("User-Agent", "cis455crawler");
			con.setInstanceFollowRedirects(false);
			for (Map.Entry<String, String> entry : request_headers.entrySet())
				con.setRequestProperty(entry.getKey(), entry.getValue());
			status = con.getResponseCode();
		}
		catch(Exception e) {
			System.out.println(e);
		}
		response_map.put("status", ""+status);
		if (status!=200 && status!=301 && status!=304 && status!=307)
		{
			input = null;
			return;
		}
		response_map.put("content-length", ""+con.getContentLength());
		response_map.put("content-type", con.getContentType());
		if (request_headers.containsKey("if-modified-since"))
			response_map.put("last-modified", getDate(con.getLastModified()));
		if(con.getHeaderField("location") != null)
			response_map.put("location", con.getHeaderField("location"));
		try {
			input = new BufferedReader(new InputStreamReader((con.getInputStream())));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		StringBuilder sb = new StringBuilder();
		String output;
		boolean first = true;
		try {
			while ((output = input.readLine()) != null) {
				if (first) {
					sb.append(output);
					first = false;
					continue;
				}
				sb.append("\n"+output);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		body = sb.toString();
	}*/

	/**
	 * Function to get the body of a response
	 * @return null in case it is a HEAD request and the body in case it is a GET request
	 */
	public String getBody() {
		return body;
	}

}